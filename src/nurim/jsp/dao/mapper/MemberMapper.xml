<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!-- 회원에 대한 CRUD -->
<mapper namespace="MemberMapper">
    
    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="member" type="nurim.jsp.model.Member">
    	<result property="id" 			column="id" />
    	<result property="userId" 		column="user_id" />
    	<result property="userPw" 		column="user_pw" />
    	<result property="userName"		column="user_name" />
    	<result property="gender" 		column="gender" />
    	<result property="birthdate"	column="birthdate" />
    	<result property="email" 		column="email" />
    	<result property="tel" 			column="tel" />
    	<result property="postcode" 	column="postcode" />
    	<result property="addr1" 		column="addr1" />
    	<result property="addr2" 		column="addr2" />
    	<result property="regDate" 		column="reg_date" />
    	<result property="editDate" 	column="edit_date" />
    </resultMap>
    
    <!-- 회원 정보를 등록한다. -->
    <insert id="insertMember" parameterType="nurim.jsp.model.Member"
    useGeneratedKeys="true" keyProperty="id">
    INSERT INTO member (
    user_id,user_pw,user_name,gender,birthdate,email,tel,postcode,addr1,addr2,reg_date,edit_date
    ) VALUES(
    #{userId},password(#{userPw}),#{userName},#{gender},#{birthdate},#{email},#{tel},#{postcode},#{addr1},
    #{addr2},now(),now()
    )
    </insert>
    
    <!-- 등록된 회원인지 확인한다. -->
    <select id="selectMemberCheck" parameterType="nurim.jsp.model.Member"
    resultType="int">
    SELECT count(id)
    FROM member
    WHERE user_id=#{userId}
    </select>
    
    <!-- 등록된 이메일인지 확인한다. -->
    <select id="selectMemberEmailCheck" parameterType="nurim.jsp.model.Member"
    resultType="int">
    SELECT count(id)
    FROM member
    WHERE email=#{email}
    </select>
    
    <!-- 회원 정보를 조회한다. -->
    <select id="selectLoginInfo" parameterType="nurim.jsp.model.Member"
    resultMap="member">
    SELECT id,user_id,user_pw,user_name,gender,DATE_FORMAT(birthdate,'%Y 년 %m 월 %d 일') AS birthdate,email,tel,postcode,
    addr1,addr2,reg_date,edit_date
    FROM member
    WHERE user_id=#{userId} AND user_pw=password(#{userPw})
    </select>
    
    <!-- 회원 목록을 조회한다. -->
    <select id="selectMemberList" parameterType="nurim.jsp.model.Member"
    resultMap="member">
    SELECT id,user_id,user_pw,user_name,gender,birthdate,email,tel,postcode,
    addr1,addr2,DATE_FORMAT(reg_date,'%Y-%m-%d') AS reg_date,edit_date
    FROM member
    <where>
	<if test="userId !=null">
	user_id like concat("%",#{userId},"%")
	</if>
	<if test="userName != null">
	user_name like concat("%",#{userName},"%")
	</if>
	</where>
	LIMIT #{limitStart},#{listCount}
    </select>
    
    <!-- 전체 회원의 수를 조회한다. -->
    <select id="selectMemberCount" parameterType="nurim.jsp.model.Member"
    resultType="int">
    SELECT count(id)
    FROM member
    <where>
    <if test="userId != null">
    user_id LIKE concat("%",#{userId},"%")
    </if>
    <if test="userName != null">
    user_name LIKE concat("%",#{userName},"%")    
    </if>
    </where>
    </select>
    
    <!-- 정보수정페이지 접근을 위해 비밀번호를 조회한다. -->
    <select id="selectMemberPasswordCheck" parameterType="nurim.jsp.model.Member"
    resultType="int">
    SELECT count(id)
    FROM member
    WHERE user_pw=password(#{userPw})
    </select>
    
    <!-- 회원정보수정 페이지에서 아이디와 비밀번호로 회원정보를 검색한다. -->
    <select id="selectMemberInformation" parameterType="nurim.jsp.model.Member"
    resultType="int">
    SELECT count(id)
    FROM member
    WHERE user_id=#{userId} AND user_pw=password(#{userPw})
    </select>
    
    <!-- 회원정보수정 페이지에서 회원정보를 수정한다. -->
    <update id="updateMemberInformation" parameterType="nurim.jsp.model.Member">
	UPDATE member 
	SET user_pw =password(#{userPw}),user_name=#{userName},gender=#{gender},birthdate=#{birthdate},
	email=#{email},tel=#{tel},postcode=#{postcode},addr1=#{addr1},addr2=#{addr2},edit_date=now()
	WHERE user_id =#{userId};
    </update>
    
    <!-- 회원 아이디를 검색한다. -->
    <select id="selectUserId" parameterType="nurim.jsp.model.Member"
    resultMap="member">
    SELECT user_id
    FROM member
    WHERE user_name=#{userName} AND email=#{email}
    </select>
    
    <!-- 회원 비밀번호를 검색한다. -->
    <select id="selectUserPw" parameterType="nurim.jsp.model.Member"
    resultMap="member">
    SELECT id,user_id,user_pw,user_name,gender,birthdate,email,tel,postcode,
    addr1,addr2,reg_date,edit_date
    FROM member
    WHERE user_id=#{userId} AND user_name=#{userName} AND email=#{email}
    </select>
    
    <!-- 회원 비밀번호를 변경한다. -->
    <update id="updateUserPw" parameterType="nurim.jsp.model.Member">
    UPDATE member
    SET user_pw=password(#{userPw}),edit_date=now()
    WHERE user_id=#{userId} AND user_name=#{userName} AND email=#{email}
    </update>
    
    <!-- 관리자에서 회원정보 변경 -->
    <update id="updateMember" parameterType="nurim.jsp.model.Member">
	UPDATE member 
	SET user_pw =password(#{userPw}),user_name=#{userName},gender=#{gender},birthdate=#{birthdate},
	email=#{email},tel=#{tel},postcode=#{postcode},addr1=#{addr1},addr2=#{addr2},edit_date=now()
	WHERE id =#{id};
    </update>
    
    <select id="selectMemberByAdmin" parameterType="nurim.jsp.model.Member"
    resultMap="member">
    SELECT id,user_id,user_pw,user_name,gender,birthdate,email,tel,postcode,
    addr1,addr2,reg_date,edit_date
    FROM member
    WHERE id=#{id}
    </select>
    
    <!-- 관리자에서 회원정보 삭제 -->
    <delete id="deleteMemberByAdmin" parameterType="nurim.jsp.model.Member">
    DELETE FROM member
    WHERE id=#{id}
    </delete>
    
    <!-- 유저게 회원정보 삭제 -->
    <delete id="deleteMember" parameterType="nurim.jsp.model.Member">
    DELETE FROM member
    WHERE id=#{id}
    </delete>
</mapper>